; ****************************************************************************************************************
; *Required project settings
; ****************************************************************************************************************
; 1) Memory bank count = 1
; 2) Memory bank size  = 1024
; 3) Interrupt vector  = 1023
;F0 => reading from FTDI 
;F1 => writing to FTDI
;F2 => present for UARTstate
;F3 => load first0 address to read in BRAM module
;F4 => reading from BRAM with auto increment
;F5 => load first1 addres to read in BRAM module

; ****************************************************************************************************************
; *\navConst Constants - Navigator entry
; ****************************************************************************************************************
	StartSymbol EQU 0xFD
	StopSymbol  EQU 0xFE
	ShiftSymbol EQU 0xFF
	OKReplyCode EQU 0xDA
	emptyComm   EQU	0xDB		
        MaxRecvData EQU 0x20
        NodeAddress EQU 0x01		;Ram location
        MaxParamQty EQU 0x16
        FSPI_RDDAT  EQU 0x03

; ****************************************************************************************************************
; *\navConst HistAccum - Navigator entry
; ****************************************************************************************************************
        ChanelMax	0x05  ;max hist accum command types + 1
        ChanelAmount	0x04  ;amount of channels we have + 1
        ChanelAllKey	0x04	
        HystLengthLSB   0x00	; amount of bits in hyst + 1 for bettet loop support
        HystLengthMSB	0x0C
        
; ****************************************************************************************************************
; *\navConst SysComm - Navigator entry
; ****************************************************************************************************************
	DoSPIExchComm	EQU 0x05 ;transmits all data to SPI & sends reply
	WriteFlashComm 	EQU 0x06 ;transmits data qty (2 bytes), PROGRAM instruction, start address(3 bytes) then data to write into the memory
	ReadFlashComm 	EQU 0x07 ;transmits start address (3 bytes) and data quantity (1 byte)
	SetWindowFlagComm	EQU 0x0A
	SetWindowStopComm	EQU 0x0B	
	SetWindowStartComm	EQU 0x0C
	TestComand 	EQU 0x0D
	GetDeviceID 	EQU 0x0E           ;returnes: PCB index, Hardvare version, Software version, Serial number
	DoEchoComm 	EQU 0x0F            ;returnes all sent data
	GetCurrRdAddrB	EQU 0x10
	WriteBRAMBlk	EQU 0x11
	ReadBRAMBlk	EQU 0x12
	GetCurrWrAddrA  EQU 0x13
	ResetPointersComm	EQU 0x14
	AccumGetDataComm	EQU 0x15
	AccumGetCounterComm	EQU 0x16
	AccumClearComm	EQU 0x17 ;returns okCode, or error, sends command clear (0-3 specific channel, 4 - all channels)
	AccumGetStateComm	EQU 0x18 ; returns state. no param required, 00-accum, 01-trnasmit 10-accum 
; ****************************************************************************************************************
; *\navConst SysErrors - Navigator entry
; ****************************************************************************************************************

	LengthMisErr	EQU 0xE0          ;data length mismatch
	ChecksumMisErr	EQU 0xE1        ;cheksm mismatch
	CommAbsentErr	EQU 0xE2         ;command with code recieved is absent
	OutOfMemErr 	EQU 0xE3           ;adress goes over FF thrue writing or reading
	TooLittleErr	EQU 0xE4          ;too little data sent
	DataFormatErr 	EQU 0xE5         ;improper data for specified command
        ParamAbsentErr 	EQU 0xE6        ;r,ested parameter is undefined
        MethForbidErr 	EQU 0xE7         ;method of parameter is not available
                           
; ****************************************************************************************************************
; *\navConst stateFlags - Navigator entry
; ****************************************************************************************************************

        ShiftFlag 	EQU 0x80
        RecvFlag 	EQU 0x40
	AddrFlag 	EQU 0x20
        DebugModeFlag 	EQU 0x04
        SPIProgFlag     EQU 0x02
        BroadcFlag 	EQU 0x01

; ****************************************************************************************************************
; *\navHw registers - Navigator entry
; ****************************************************************************************************************
        
	TransmCounter 	EQU sE
	RecvCounter 	EQU sD
	CheckSumReg 	EQU sC
	NodeState 	EQU sF

; ****************************************************************************************************************
; *\navConst ioPorts - Navigator entry
; ****************************************************************************************************************

	UARTDataIn 		EQU 0xF0
	UARTDataOut 		EQU 0xF1
	UARTState 		EQU 0xF2             ;bit0-RX full,1-RX half full,2-RX data present,4-TX full,5-TX half full,7-SPI transmission done
	BRAMSetStartAddrLSB 	EQU 0xF3
	BRAMSetStartAddrMSB 	EQU 0xF5
	BRAMRdWrWinc 		EQU 0xF4
	ReadCurrRdAddr0 		EQU 0xF6  ;this is port B (BRAM)
	ReadCurrRdAddr1 		EQU 0xF7  ;this is port B (BRAM)
	ReadCurrWrLSB		EQU 0xF8  ;this is port A (BRAM)
	ReadCurrWrMSB		EQU 0xF9  ;this is port A (BRAM)
	SetWindowStartMSB	EQU 0xFA
	SetWindowStartLSB	EQU 0xFB
	SetWindowStopMSB	EQU 0xFC
	SetWindowStopLSB	EQU 0xFD
	SetWindowFlag		EQU 0xFE
	ResetPointers		EQU 0xFF
	
	SPIWrite		EQU 0xE0
	SPIRead			EQU 0xE1
	SPISlaveSelect		EQU 0xE2	
	
	AccumClearPort		EQU 0xE3
	AccumGetStatePort	EQU 0xE4
	AccumRdIncPort	EQU 0xE5
	AccumGetDataPort	EQU 0xE6
				
							
   	EINT          
	mainLoop:                JUMP     mainLoop
; ################################################################################################################
; ################################################################################################################
; ################################################################################################################
; \navGrpBegin IRQ - Opens group entry in the navigator 
; ****************************************************************************************************************
; *Reciving something from Pc
; ****************************************************************************************************************
UART_IRQ: 
	OUT s0, UARTDataIn
	LOAD s0, s0                        ;nope
	IN s0, UARTDataIn
	COMP s0, StartSymbol
	JUMP NZ, UART_IRQ_0		; not a start symbol
	AND NodeState, 0x00		; reset flags if start symbo (SPI related instruction)
	OR NodeState, RecvFlag
	LOAD RecvCounter, 0x00
	RET 
UART_IRQ_0: 
	TEST NodeState, RecvFlag
	RET Z
	COMP s0, ShiftSymbol
	JUMP Z, UART_IRQ_SHIFT
	COMP s0, StopSymbol
	JUMP Z, UART_IRQ_Decode
	TEST NodeState, ShiftFlag
	JUMP Z, UART_IRQ_1
	AND NodeState, 0x7F                            
	ADD s0, StartSymbol                ;previous symbol was ShiftSymbol
                                           ; F7 = FF - ShiftFlag
UART_IRQ_1: 
	TEST NodeState, AddrFlag           
	JUMP NZ, UART_IRQ_3
	TEST RecvCounter, 0	xFF
	JUMP NZ, UART_IRQ_Terminate
	COMP s0, NodeAddress
	JUMP Z, UART_IRQ_2
	COMP s0, 0x00
	JUMP Z, UART_IRQ_2
	AND NodeState, 0x00
	RET 
UART_IRQ_2: 
	OR	NodeState, AddrFlag
	LOAD	CheckSumReg, s0
	RET 
UART_IRQ_3: 
	XOR 	CheckSumReg, s0                ;something wrong with all that checkSum thing (why do we start checking only if strang constant EQUels receved byte
	test	NodeState,SPIProgFlag
	jump	Z,UART_IRQ_6
	comp	RecvCounter,0		   ;start of WriteFlashComm implementation
	jump	NZ,UART_IRQ_4
	load	sA,s0
	add	RecvCounter,1	
	ret
	UART_IRQ_4:
	comp	RecvCounter,1
	jump	NZ,UART_IRQ_5	
	load	sB,s0
	add	RecvCounter,1
	load	s3,0
	out	s3,SPISlaveSelect	 ;slave select on
	ret
	UART_IRQ_5:
	test	sA,0xFF
	jump	NZ,UART_IRQ_Flash
	test	sB,0xFF	
	ret	Z
	UART_IRQ_Flash:
	sub	sA,1		
	subc	sB,0
	out	s0,SPIWrite	;sending data directly to SPI
	ret
	UART_IRQ_6:	  		 ;end of WriteFlashComm implementation
	test	RecvCounter,0xFF
	jump	NZ,UART_IRQ_7
	comp	s0,WriteFlashComm
	jump	NZ,UART_IRQ_7
	or 	NodeState,SPIProgFlag
	ret	
UART_IRQ_7:
	COMP	RecvCounter, MaxRecvData
	JUMP	NC, UART_IRQ_Over
	STORE	s0, (RecvCounter)
	ADD	RecvCounter, 0x01
	RET 	
UART_IRQ_Over: 
	LOAD	s3, LengthMisErr
	JUMP	UART_IRQ_Error                ;31 symbols are recieved - too long message
UART_IRQ_SHIFT: 
	OR 	NodeState, ShiftFlag
	RET 
UART_IRQ_Terminate: 
	AND NodeState, 0x00
	load s0,1
	OUT s0, SPISlaveSelect	
	RET 
UART_IRQ_Decode: ;recieved qty INPUT s1, data INPUT scratchpad 0..(s1)-1
	LOAD	s3, 1
	OUT	s3, SPISlaveSelect
;	TEST	NodeState, AddrFlag		;cheking "address correct"
;	JUMP	Z, UART_IRQ_Terminate     
	TEST	CheckSumReg, 0xFF
	LOAD	s3, ChecksumMisErr
	JUMP	NZ, UART_IRQ_Error            ;checksum mismatch
	test	NodeState, SPIProgFlag
	JUMP	Z, UART_IRQ_Decode_1
	LOAD	s3, OKReplyCode
	JUMP	UART_IRQ_Error
	UART_IRQ_Decode_1:
		LOAD	s3,LengthMisErr
		FETCH	s0,0x00                       ;command code, s1,s2-full data qty (with command & checksum)
		COMP	s0, SetWindowStartComm
		JUMP	Z, SetWindowStartProc
		COMP	s0, SetWindowStopComm
		JUMP	Z, SetWindowStopProc
		COMP	s0, SetWindowFlagComm
		JUMP	Z, SetWindowFlagProc
		COMP	s0, GetDeviceID
		JUMP	Z, DoGetDeviceID
		COMP	s0, DoEchoComm
		JUMP	Z, DoEchoProc
		COMP	s0, TestComand
		JUMP	Z, TestComandDo
		COMP	s0, GetCurrRdAddrB
		JUMP	Z, GetCurrRdAddrB
		COMP	s0, GetCurrWrAddrA
		JUMP	Z, GetCurrWrAddrADo
		COMP	s0, WriteBRAMBlk
		JUMP	Z, WriteBRAMBlk
		COMP	s0, ReadBRAMBlk
		JUMP	Z, ReadBRAMBlk
		comp	s0,DoSPIExchComm
		jump	Z,DoSPIExchProc
		comp	s0,ReadFlashComm
	 	jump	Z,ReadFlashProc
	 	comp	s0,ResetPointersComm
	 	jump	Z,ResetPointersProc
		comp	s0, AccumClearComm
		jump	Z, AccumClearProc
		comp	s0, AccumGetStateComm
		jump	Z, AccumGetStateProc
		comp	s0, AccumGetDataComm
		jump	Z, AccumGetDataProc
		comp	s0, AccumGetCounterComm
		jump	Z, AccumGetCounterProc
		LOAD	s3, CommAbsentErr             ;command not found
UART_IRQ_Error:
	LOAD s4, StartSymbol
	OUT s4,UARTDataOut
	LOAD s0, s0   ;wait for 150ns
	LOAD s0, s0
	LOAD s0, s0
	UART_IRQ_Error_0:
		IN s4, UARTState
		TEST s4, 0x01
		JUMP NZ, UART_IRQ_Error_0
		OUT s3, UARTDataOut
		LOAD s0, s0			    
		LOAD s0, s0
		LOAD s0, s0
			    
	UART_IRQ_Error_1: 
		IN s4, UARTState
		TEST s4, 0x01
		JUMP NZ, UART_IRQ_Error_1
		OUT s3, UARTDataOut
		LOAD s3, StopSymbol
		LOAD s0, s0
		LOAD s0, s0
			    
	UART_IRQ_Error_2: 
		IN s4, UARTState
		TEST s4, 0x01
		JUMP NZ, UART_IRQ_Error_2                            
		OUT s3, UARTDataOut
		AND NodeState, DebugModeFlag
		RET 
		; \navGrpEnd
TestComandDo: 
	JUMP mainLoop
; i wanna simplify this send sybol procedure and strip out transmCounter and strange dellay thing, you can see them comented
; the broadcast flag also goes to coments
; --------------------------start-simplifying-SendSymbolProc---------------------------------------
EndDataTrans: ;cheksum & stop symbol transmission  ++
;           	                 TEST NodeState, BroadcFlag
;                            RETURN NZ
	LOAD s3, CheckSumReg
	CALL SendSymbolProc
	EndDataTrans_0: 
		LOAD s3, StopSymbol
	EndDataTrans_1: 
		IN s4, UARTState
		TEST s4, 0x01
		JUMP NZ, EndDataTrans_1
		OUT s3, UARTDataOut
		AND NodeState, DebugModeFlag
		RET 

SendSymbolProc: ;data INPUT s3  ++
	XOR CheckSumReg, s3
	COMP s3, StartSymbol
	JUMP C, SendSymbolProc_1           ;no shift rEQUired
	LOAD s5, s3
	SUB s5, StartSymbol
	LOAD s3, ShiftSymbol
	SendSymbolProc_1: 
		IN s4, UARTState
		TEST s4, 0x01
		JUMP NZ, SendSymbolProc_1          ;buffer full, waiting
		OUT s3, UARTDataOut
		COMP s3, ShiftSymbol
		RET NZ
		LOAD s3, s5
		JUMP SendSymbolProc_1              ;after shift symbol

StartUARTTransmission: 
	LOAD CheckSumReg, 0x00
	LOAD TransmCounter, 00
	LOAD s3, StartSymbol
	OUT s3, UARTDataOut
	RET 
; -------------------------------end-simplifying-SendSymbolProc-------------------------------
DoGetDeviceID:
	CALL StartUARTTransmission
	LOAD s0, 0x04
	DoGetDeviceID_1: 
		LOAD s3, 0x08
		CALL SendSymbolProc
		SUB s0, 0x01
		JUMP NZ, DoGetDeviceID_1
		JUMP EndDataTrans
DoEchoProc: ;;DEBUG++
	CALL StartUARTTransmission
	LOAD s0, 0x00
	SUB RecvCounter, 0x01
	DoEchoProc_1: 
		FETCH s3, (s0)
		CALL SendSymbolProc
		ADD s0, 0x01
		SUB RecvCounter, 0x01
		JUMP NZ, DoEchoProc_1
		JUMP EndDataTrans
		
; \navGrpBegin SPI - Opens group entry in the navigator 
DoSPIExchProc:					;++
	load	s3,2
	comp	RecvCounter,3
	jump	C,UART_IRQ_Error
	call	StartUARTTransmission
	load	s0,1		;address of first data byte	
	sub	RecvCounter,2		;pure data qty (-command & checksum)
	load	s3,0
	out	s3,SPISlaveSelect	 ;slave select on
	DoSPIExchProc_1:
		fetch	s3,(s0)
		call	ExchangeSPIByte
		call	SendSymbolProc
		add	s0,1
		sub	RecvCounter,1
		jump	NZ,DoSPIExchProc_1
		load	s3,1
		out	s3,SPISlaveSelect	 ;slave select off
		jump	EndDataTrans	
  
ReadFlashProc:
	test	NodeState,BroadcFlag
	ret	NZ
	comp	RecvCounter,6
	jump	NZ,UART_IRQ_Error
	load	s3,0
	out	s3,SPISlaveSelect	 ;slave select on
	load	s3,FSPI_RDDAT
	call	ExchangeSPIByte	 ;command
	fetch	s3,1
	call	ExchangeSPIByte
	fetch	s3,2
	call	ExchangeSPIByte
	fetch	s3,3
	call	ExchangeSPIByte	 ;address
	call	StartUARTTransmission
	fetch	s0,4		  	 ;byte count
	ReadFlashProc_1:
		call	ExchangeSPIByte
		call	SendSymbolProc
		sub	s0,1
		jump	NZ,ReadFlashProc_1
		load	s3,1
		out	s3,SPISlaveSelect	 ;slave select off
		jump	EndDataTrans

ExchangeSPIByte:  ;byte to send in s3
	out	s3,SPIWrite
	ExchangeSPIByte_1:
		in	s4,UARTState
		test	s4,0x04
		jump	NC,ExchangeSPIByte_1 ;waiting for SPI ready
		in	s3,SPIRead
		ret
; \navGrpEnd

; \navGrpBegin WriteBRAMBlk - Opens group entry in the navigator 
WriteBRAMBlk: 		;i want to add here length test
	;COMP RecvCounter,0x  
	;JUMP NZ, UART_IRQ_Error
	FETCH s0, 0x01                       ;address
	FETCH s1, 0x02                       ;[3FFF;2000]
	OUT s0, BRAMSetStartAddrMSB
	OUT s1, BRAMSetStartAddrLSB                          
	FETCH s0, 0x03
	LOAD s3, 0x03			;blk lenght
WriteBRAMBlk_1: 
	ADD s3, 0x01
	FETCH s1, (s3)
	OUT s1, BRAMRdWrWinc
	SUB s0, 0x01
	JUMP NZ, WriteBRAMBlk_1 
	;CALL StartUARTTransmission 
	LOAD s3, OKReplyCode
	;CALL SendSymbolProc
	;CALL EndDataTrans
	;RET
	JUMP UART_IRQ_Error
	; \navGrpEnd 
                               
; \navGrpBegin ReadBRAMBlk
ReadBRAMBlk:
	COMP RecvCounter, 0x06
	JUMP NZ, UART_IRQ_Error
	FETCH s0, 0x01                       ;address
	FETCH s1, 0x02                       ;[3FFF;2000]
	OUT s0, BRAMSetStartAddrMSB
	OUT s1, BRAMSetStartAddrLSB
	CALL StartUARTTransmission
	IN s3, BRAMRdWrWinc		;force tic for address counter     
	FETCH s0, 0x03
	FETCH s8, 0x04
	CALL SendSymbolProc  ; this line is for the first byte to be memorized
ReadBRAMBlk_1:		
	IN s3, BRAMRdWrWinc
	CALL SendSymbolProc
	SUB s8, 0x01
	SUBC s0, 0x00
	JUMP NZ, ReadBRAMBlk_1          ;not all data bytes was sent
	JUMP EndDataTrans
	; \navGrpEnd		                   

GetCurrRdAddrB:
	IN s1, ReadCurrRdAddr0
	IN s0, ReadCurrRdAddr1
	CALL StartUARTTransmission
	LOAD s3, s0
	CALL SendSymbolProc
	LOAD s3, s1
	CALL SendSymbolProc
	JUMP EndDataTrans
			
GetCurrWrAddrADo:
	IN s1, ReadCurrWrLSB
	IN s0, ReadCurrWrMSB
	CALL StartUARTTransmission
	LOAD s3,s0
	CALL SendSymbolProc
	LOAD s3,s1
	CALL SendSymbolProc
	JUMP EndDataTrans

SetWindowStartProc:
	COMP RecvCounter, 0x04
	JUMP NZ, UART_IRQ_Error
	FETCH s0, 0x01                       ;marginStart
	FETCH s1, 0x02                       ;[0x0000;0xFFFF]
	OUT s0, SetWindowStartMSB
	OUT s1, SetWindowStartLSB
	LOAD s3, OKReplyCode
	JUMP UART_IRQ_Error

SetWindowStopProc:
	COMP RecvCounter, 0x04
	JUMP NZ, UART_IRQ_Error
	FETCH s0, 0x01                       ;marginStop
	FETCH s1, 0x02                       ;[0x0000;0xFFFF]
	OUT s0, SetWindowStopMSB
	OUT s1, SetWindowStopLSB
	LOAD s3, OKReplyCode
	JUMP UART_IRQ_Error


SetWindowFlagProc:
	COMP RecvCounter, 0x03
	JUMP NZ, UART_IRQ_Error
	FETCH s0, 0x01
	OUT s0, SetWindowFlag
	LOAD s3, OKReplyCode
	JUMP UART_IRQ_Error			

ResetPointersProc:
	COMP RecvCounter, 0x03        
	JUMP NZ, UART_IRQ_Error
	FETCH s0, 0x01
	OUT s0, ResetPointers  
	LOAD s3, OKReplyCode   
	JUMP UART_IRQ_Error	
	                   
AccumClearProc:
	COMP	RecvCounter, 0x03
	JUMP	NZ,UART_IRQ_Error
	FETCH	s0, 0x01
	AND s0, 0xFF ;clears the carry flag with no change to register contents		
	COMP s0, ChanelMax ; check parameters in range [0x00 - 0x04]
	JUMP C, DataFormatErr
	OUT s0, AccumClearPort
	LOAD s3, OKReplyCode
	JUMP UART_IRQ_Error
	
AccumGetStateProc:
	COMP	RecvCounter, 0x02
	JUMP	NZ,UART_IRQ_Error
        IN s3, AccumGetStatePort ;we will get state information in single byte with 2 bit for chanel state 00-accumulate, 01-transmite 10-errase
        CALL SendSymbolProc
        JUMP EndDataTrans
        
AccumGetDataProc:
	COMP	RecvCounter, 0x03
	JUMP	NZ,UART_IRQ_Error
	FETCH	s0, 0x01
	AND s0, 0xFF ;clears the carry flag with no change to register contents		
	COMP s0, ChanelMax ; check parameters in range [0x00 - 0x04]
	JUMP C, DataFormatErr
	OUT s0, AccumGetDataPort
	LOAD s0, HystLengthLSB
	LOAD s8, HystLengthMSB
	CALL StartUARTTransmission
	
	AccumGetDataProc_1:		
		SUB s8, 0x01
		SUBC s0, 0x00
		IN s3, AccumRdIncPort
		CALL SendSymbolProc
		JUMP NZ, AccumGetDataProc_1          ;not all data bytes was sent
		JUMP EndDataTrans

AccumGetCounterProc:
	COMP	RecvCounter, 0x03
	JUMP	NZ,UART_IRQ_Error
	FETCH	s0, 0x01
	AND s0, 0xFF	;clears the CARRY flag with no change to register contents		
	COMP s0, ChanelMax ; check parameters in range [0x00 - 0x04]
	JUMP C, DataFormatErr
	OUT s8, AccumGetCounterPort
	LOAD s8, ChanelAmount ;0x04
	CALL StartUARTTransmission
	TEST s0, 0x00	;clears the ZERO flag with no change to register contents
	COMP s0, ChanelAllKey
	JUMP Z, AccumGetCounterProc_1
	IN s3, AccumGetCounterPort
	CALL SendSymbolProc
	JUMP EndDataTrans
	
	AccumGetCounterProc_1:
		SUB s8, 0x01
		IN s3, AccumGetCounterPort
		CALL SendSymbolProc
		JUMP NZ, AccumGetCounterProc_1	;not all data bytes were sent
		JUMP EndDataTrans

	                       
; ################################################################################################################
;*****************************************************************************************************************
;*Interrupt service routine                                                                   
;*****************************************************************************************************************
isr:
	CALL UART_IRQ
	RETI    ENABLE
	ORG     0x3FF
	JUMP    isr
; ################################################################################################################
